# 3.4 Property Paths

# Recursive rules to identify Alice's Network
[:Alice, a, :MemberOfAlicesNetwork],
[:Alice, :hopsAwayFromAlice, 0],
[?person2, a, :MemberOfAlicesNetwork],
[?person2, :hopsAwayFromAlice, 1] :-
    [:Alice, :knows, ?person2].

[?person2, a, :MemberOfAlicesNetwork],
[?person2, :hopsAwayFromAlice, ?newNumberOfHops] :-
    [?person1, a, :MemberOfAlicesNetwork],
    [?person1, :hopsAwayFromAlice, ?previousNumberOfHops],
    [?person1, :knows, ?person2],
    BIND (?previousNumberOfHops + 1 AS ?newNumberOfHops).

# Recursive rules to identify the path to those people
[?pathNode, :pathTo, ?endPerson],
[?pathNode, :pathIncludes, ?endPerson],
[?pathNode, :hasPathLength, ?hopsAwayFromAlice] :-
    [?endPerson, a, ___],  # Fill in the class restriction required for members of the chain
    [?endPerson, :hopsAwayFromAlice, ?hopsAwayFromAlice],
    SKOLEM("Path to person", ?endPerson, ?hopsAwayFromAlice, ?pathNode).

[?pathNode, :pathIncludes, ?person1] :-
    [?pathNode, :pathTo, ?endPerson],
    [?pathNode, :pathIncludes, ?person2],
    [?person1, ___, ?person2], # Fill in the predicate that directly links sequential members of this chain
    [?person1, a, ___].  # Fill in the class restriction required for members of the chain
